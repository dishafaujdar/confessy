# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
        'search': str,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# User types

class UserOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the User create method"""
    id: _str
    confessions: 'ConfessionsCreateManyNestedWithoutRelationsInput'
    Likes: 'LikeCreateManyNestedWithoutRelationsInput'


class UserCreateInput(UserOptionalCreateInput):
    """Required arguments to the User create method"""
    username: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the User create method, without relations"""
    id: _str


class UserCreateWithoutRelationsInput(UserOptionalCreateWithoutRelationsInput):
    """Required arguments to the User create method, without relations"""
    username: _str

class UserConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'UserCreateWithoutRelationsInput'
    where: 'UserWhereUniqueInput'

class UserCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'


class UserCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserCreateWithoutRelationsInput', List['UserCreateWithoutRelationsInput']]
    connect: Union['UserWhereUniqueInput', List['UserWhereUniqueInput']]
    connect_or_create: Union['UserConnectOrCreateWithoutRelationsInput', List['UserConnectOrCreateWithoutRelationsInput']]

_UserWhereUnique_id_Input = TypedDict(
    '_UserWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_UserWhereUnique_username_Input = TypedDict(
    '_UserWhereUnique_username_Input',
    {
        'username': '_str',
    },
    total=True
)

UserWhereUniqueInput = Union[
    '_UserWhereUnique_id_Input',
    '_UserWhereUnique_username_Input',
]


class UserUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    username: _str
    confessions: 'ConfessionsUpdateManyWithoutRelationsInput'
    Likes: 'LikeUpdateManyWithoutRelationsInput'


class UserUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    username: _str


class UserUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserCreateWithoutRelationsInput']
    connect: List['UserWhereUniqueInput']
    connect_or_create: List['UserConnectOrCreateWithoutRelationsInput']
    set: List['UserWhereUniqueInput']
    disconnect: List['UserWhereUniqueInput']
    delete: List['UserWhereUniqueInput']

    # TODO
    # update: List['UserUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserScalarWhereInput']
    # upsert: List['UserUpserteWithWhereUniqueWithoutRelationsInput']


class UserUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserUpdateInput'
    # upsert: 'UserUpsertWithoutRelationsInput'


class UserUpsertInput(TypedDict):
    create: 'UserCreateInput'
    update: 'UserUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_User_id_OrderByInput = TypedDict(
    '_User_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_User_username_OrderByInput = TypedDict(
    '_User_username_OrderByInput',
    {
        'username': 'SortOrder',
    },
    total=True
)

_User_RelevanceInner = TypedDict(
    '_User_RelevanceInner',
    {
        'fields': 'List[UserScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_User_RelevanceOrderByInput = TypedDict(
    '_User_RelevanceOrderByInput',
    {
        '_relevance': '_User_RelevanceInner',
    },
    total=True
)

UserOrderByInput = Union[
    '_User_id_OrderByInput',
    '_User_username_OrderByInput',
    '_User_RelevanceOrderByInput',
]



# recursive User types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserRelationFilter = TypedDict(
    'UserRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserInclude(TypedDict, total=False):
    """User relational arguments"""
    confessions: Union[bool, 'FindManyConfessionsArgsFromUser']
    Likes: Union[bool, 'FindManyLikeArgsFromUser']


    

class UserIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    confessions: Union[bool, 'FindManyConfessionsArgsFromUserRecursive1']
    Likes: Union[bool, 'FindManyLikeArgsFromUserRecursive1']


class UserIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    confessions: Union[bool, 'FindManyConfessionsArgsFromUserRecursive2']
    Likes: Union[bool, 'FindManyLikeArgsFromUserRecursive2']


class UserIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    confessions: Union[bool, 'FindManyConfessionsArgsFromUserRecursive3']
    Likes: Union[bool, 'FindManyLikeArgsFromUserRecursive3']


class UserIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    confessions: Union[bool, 'FindManyConfessionsArgsFromUserRecursive4']
    Likes: Union[bool, 'FindManyLikeArgsFromUserRecursive4']


class UserIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class ConfessionsIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']
    Likes: Union[bool, 'FindManyLikeArgsFromUserRecursive1']


class ConfessionsIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']
    Likes: Union[bool, 'FindManyLikeArgsFromUserRecursive2']


class ConfessionsIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']
    Likes: Union[bool, 'FindManyLikeArgsFromUserRecursive3']


class ConfessionsIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']
    Likes: Union[bool, 'FindManyLikeArgsFromUserRecursive4']


class ConfessionsIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class ConfessionsArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ConfessionsIncludeFromConfessionsRecursive1'


class ConfessionsArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'ConfessionsIncludeFromConfessionsRecursive2'


class ConfessionsArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'ConfessionsIncludeFromConfessionsRecursive3'


class ConfessionsArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'ConfessionsIncludeFromConfessionsRecursive4'


class ConfessionsArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyConfessionsArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ConfessionsOrderByInput', List['ConfessionsOrderByInput']]
    where: 'ConfessionsWhereInput'
    cursor: 'ConfessionsWhereUniqueInput'
    distinct: List['ConfessionsScalarFieldKeys']
    include: 'ConfessionsIncludeFromConfessionsRecursive1'


class FindManyConfessionsArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ConfessionsOrderByInput', List['ConfessionsOrderByInput']]
    where: 'ConfessionsWhereInput'
    cursor: 'ConfessionsWhereUniqueInput'
    distinct: List['ConfessionsScalarFieldKeys']
    include: 'ConfessionsIncludeFromConfessionsRecursive2'


class FindManyConfessionsArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ConfessionsOrderByInput', List['ConfessionsOrderByInput']]
    where: 'ConfessionsWhereInput'
    cursor: 'ConfessionsWhereUniqueInput'
    distinct: List['ConfessionsScalarFieldKeys']
    include: 'ConfessionsIncludeFromConfessionsRecursive3'


class FindManyConfessionsArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ConfessionsOrderByInput', List['ConfessionsOrderByInput']]
    where: 'ConfessionsWhereInput'
    cursor: 'ConfessionsWhereUniqueInput'
    distinct: List['ConfessionsScalarFieldKeys']
    include: 'ConfessionsIncludeFromConfessionsRecursive4'


class FindManyConfessionsArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ConfessionsOrderByInput', List['ConfessionsOrderByInput']]
    where: 'ConfessionsWhereInput'
    cursor: 'ConfessionsWhereUniqueInput'
    distinct: List['ConfessionsScalarFieldKeys']
    
    

class LikeIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    userLike: Union[bool, 'UserArgsFromUserRecursive1']
    confession: Union[bool, 'ConfessionsArgsFromUserRecursive1']


class LikeIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    userLike: Union[bool, 'UserArgsFromUserRecursive2']
    confession: Union[bool, 'ConfessionsArgsFromUserRecursive2']


class LikeIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    userLike: Union[bool, 'UserArgsFromUserRecursive3']
    confession: Union[bool, 'ConfessionsArgsFromUserRecursive3']


class LikeIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    userLike: Union[bool, 'UserArgsFromUserRecursive4']
    confession: Union[bool, 'ConfessionsArgsFromUserRecursive4']


class LikeIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class LikeArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'LikeIncludeFromLikeRecursive1'


class LikeArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'LikeIncludeFromLikeRecursive2'


class LikeArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'LikeIncludeFromLikeRecursive3'


class LikeArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'LikeIncludeFromLikeRecursive4'


class LikeArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyLikeArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive1'


class FindManyLikeArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive2'


class FindManyLikeArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive3'


class FindManyLikeArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive4'


class FindManyLikeArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    


FindManyUserArgs = FindManyUserArgsFromUser
FindFirstUserArgs = FindManyUserArgsFromUser


    

class UserWhereInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    username: Union[_str, 'types.StringFilter']
    confessions: 'ConfessionsListRelationFilter'
    Likes: 'LikeListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive1', List['UserWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive1']
    OR: List['UserWhereInputRecursive1']
    NOT: List['UserWhereInputRecursive1']


class UserWhereInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    username: Union[_str, 'types.StringFilter']
    confessions: 'ConfessionsListRelationFilter'
    Likes: 'LikeListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive2', List['UserWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive2']
    OR: List['UserWhereInputRecursive2']
    NOT: List['UserWhereInputRecursive2']


class UserWhereInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    username: Union[_str, 'types.StringFilter']
    confessions: 'ConfessionsListRelationFilter'
    Likes: 'LikeListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive3', List['UserWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive3']
    OR: List['UserWhereInputRecursive3']
    NOT: List['UserWhereInputRecursive3']


class UserWhereInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    username: Union[_str, 'types.StringFilter']
    confessions: 'ConfessionsListRelationFilter'
    Likes: 'LikeListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive4', List['UserWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive4']
    OR: List['UserWhereInputRecursive4']
    NOT: List['UserWhereInputRecursive4']


class UserWhereInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    username: Union[_str, 'types.StringFilter']
    confessions: 'ConfessionsListRelationFilter'
    Likes: 'LikeListRelationFilter'



# aggregate User types


    

class UserScalarWhereWithAggregatesInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive1']


class UserScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive2']


class UserScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive3']


class UserScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive4']


class UserScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']



class UserGroupByOutput(TypedDict, total=False):
    id: _str
    username: _str
    _sum: 'UserSumAggregateOutput'
    _avg: 'UserAvgAggregateOutput'
    _min: 'UserMinAggregateOutput'
    _max: 'UserMaxAggregateOutput'
    _count: 'UserCountAggregateOutput'


class UserAvgAggregateOutput(TypedDict, total=False):
    """User output for aggregating averages"""


class UserSumAggregateOutput(TypedDict, total=False):
    """User output for aggregating sums"""


class UserScalarAggregateOutput(TypedDict, total=False):
    """User output including scalar fields"""
    id: _str
    username: _str


UserMinAggregateOutput = UserScalarAggregateOutput
UserMaxAggregateOutput = UserScalarAggregateOutput


class UserMaxAggregateInput(TypedDict, total=False):
    """User input for aggregating by max"""
    id: bool
    username: bool


class UserMinAggregateInput(TypedDict, total=False):
    """User input for aggregating by min"""
    id: bool
    username: bool


class UserNumberAggregateInput(TypedDict, total=False):
    """User input for aggregating numbers"""


UserAvgAggregateInput = UserNumberAggregateInput
UserSumAggregateInput = UserNumberAggregateInput


UserCountAggregateInput = TypedDict(
    'UserCountAggregateInput',
    {
        'id': bool,
        'username': bool,
        '_all': bool,
    },
    total=False,
)

UserCountAggregateOutput = TypedDict(
    'UserCountAggregateOutput',
    {
        'id': int,
        'username': int,
        '_all': int,
    },
    total=False,
)


UserKeys = Literal[
    'id',
    'username',
    'confessions',
    'Likes',
]
UserScalarFieldKeys = Literal[
    'id',
    'username',
]
UserScalarFieldKeysT = TypeVar('UserScalarFieldKeysT', bound=UserScalarFieldKeys)

UserRelationalFieldKeys = Literal[
        'confessions',
        'Likes',
    ]

# Confessions types

class ConfessionsOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Confessions create method"""
    id: _str
    userId: _str
    user: 'UserCreateNestedWithoutRelationsInput'
    Likes: 'LikeCreateManyNestedWithoutRelationsInput'


class ConfessionsCreateInput(ConfessionsOptionalCreateInput):
    """Required arguments to the Confessions create method"""
    text: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ConfessionsOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Confessions create method, without relations"""
    id: _str
    userId: _str


class ConfessionsCreateWithoutRelationsInput(ConfessionsOptionalCreateWithoutRelationsInput):
    """Required arguments to the Confessions create method, without relations"""
    text: _str

class ConfessionsConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ConfessionsCreateWithoutRelationsInput'
    where: 'ConfessionsWhereUniqueInput'

class ConfessionsCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ConfessionsCreateWithoutRelationsInput'
    connect: 'ConfessionsWhereUniqueInput'
    connect_or_create: 'ConfessionsConnectOrCreateWithoutRelationsInput'


class ConfessionsCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ConfessionsCreateWithoutRelationsInput', List['ConfessionsCreateWithoutRelationsInput']]
    connect: Union['ConfessionsWhereUniqueInput', List['ConfessionsWhereUniqueInput']]
    connect_or_create: Union['ConfessionsConnectOrCreateWithoutRelationsInput', List['ConfessionsConnectOrCreateWithoutRelationsInput']]

_ConfessionsWhereUnique_id_Input = TypedDict(
    '_ConfessionsWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

ConfessionsWhereUniqueInput = _ConfessionsWhereUnique_id_Input


class ConfessionsUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    text: _str
    user: 'UserUpdateOneWithoutRelationsInput'
    Likes: 'LikeUpdateManyWithoutRelationsInput'


class ConfessionsUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    text: _str


class ConfessionsUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ConfessionsCreateWithoutRelationsInput']
    connect: List['ConfessionsWhereUniqueInput']
    connect_or_create: List['ConfessionsConnectOrCreateWithoutRelationsInput']
    set: List['ConfessionsWhereUniqueInput']
    disconnect: List['ConfessionsWhereUniqueInput']
    delete: List['ConfessionsWhereUniqueInput']

    # TODO
    # update: List['ConfessionsUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ConfessionsUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ConfessionsScalarWhereInput']
    # upsert: List['ConfessionsUpserteWithWhereUniqueWithoutRelationsInput']


class ConfessionsUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ConfessionsCreateWithoutRelationsInput'
    connect: 'ConfessionsWhereUniqueInput'
    connect_or_create: 'ConfessionsConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ConfessionsUpdateInput'
    # upsert: 'ConfessionsUpsertWithoutRelationsInput'


class ConfessionsUpsertInput(TypedDict):
    create: 'ConfessionsCreateInput'
    update: 'ConfessionsUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Confessions_id_OrderByInput = TypedDict(
    '_Confessions_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Confessions_text_OrderByInput = TypedDict(
    '_Confessions_text_OrderByInput',
    {
        'text': 'SortOrder',
    },
    total=True
)

_Confessions_userId_OrderByInput = TypedDict(
    '_Confessions_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Confessions_RelevanceInner = TypedDict(
    '_Confessions_RelevanceInner',
    {
        'fields': 'List[ConfessionsScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Confessions_RelevanceOrderByInput = TypedDict(
    '_Confessions_RelevanceOrderByInput',
    {
        '_relevance': '_Confessions_RelevanceInner',
    },
    total=True
)

ConfessionsOrderByInput = Union[
    '_Confessions_id_OrderByInput',
    '_Confessions_text_OrderByInput',
    '_Confessions_userId_OrderByInput',
    '_Confessions_RelevanceOrderByInput',
]



# recursive Confessions types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ConfessionsRelationFilter = TypedDict(
    'ConfessionsRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ConfessionsListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ConfessionsInclude(TypedDict, total=False):
    """Confessions relational arguments"""
    user: Union[bool, 'UserArgsFromConfessions']
    Likes: Union[bool, 'FindManyLikeArgsFromConfessions']


    

class UserIncludeFromConfessions(TypedDict, total=False):
    """Relational arguments for Confessions"""
    confessions: Union[bool, 'FindManyConfessionsArgsFromConfessionsRecursive1']
    Likes: Union[bool, 'FindManyLikeArgsFromConfessionsRecursive1']


class UserIncludeFromConfessionsRecursive1(TypedDict, total=False):
    """Relational arguments for Confessions"""
    confessions: Union[bool, 'FindManyConfessionsArgsFromConfessionsRecursive2']
    Likes: Union[bool, 'FindManyLikeArgsFromConfessionsRecursive2']


class UserIncludeFromConfessionsRecursive2(TypedDict, total=False):
    """Relational arguments for Confessions"""
    confessions: Union[bool, 'FindManyConfessionsArgsFromConfessionsRecursive3']
    Likes: Union[bool, 'FindManyLikeArgsFromConfessionsRecursive3']


class UserIncludeFromConfessionsRecursive3(TypedDict, total=False):
    """Relational arguments for Confessions"""
    confessions: Union[bool, 'FindManyConfessionsArgsFromConfessionsRecursive4']
    Likes: Union[bool, 'FindManyLikeArgsFromConfessionsRecursive4']


class UserIncludeFromConfessionsRecursive4(TypedDict, total=False):
    """Relational arguments for Confessions"""

    

class UserArgsFromConfessions(TypedDict, total=False):
    """Arguments for Confessions"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromConfessionsRecursive1(TypedDict, total=False):
    """Arguments for Confessions"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromConfessionsRecursive2(TypedDict, total=False):
    """Arguments for Confessions"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromConfessionsRecursive3(TypedDict, total=False):
    """Arguments for Confessions"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromConfessionsRecursive4(TypedDict, total=False):
    """Arguments for Confessions"""
    
    

class FindManyUserArgsFromConfessions(TypedDict, total=False):
    """Arguments for Confessions"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromConfessionsRecursive1(TypedDict, total=False):
    """Arguments for Confessions"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromConfessionsRecursive2(TypedDict, total=False):
    """Arguments for Confessions"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromConfessionsRecursive3(TypedDict, total=False):
    """Arguments for Confessions"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromConfessionsRecursive4(TypedDict, total=False):
    """Arguments for Confessions"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class ConfessionsIncludeFromConfessions(TypedDict, total=False):
    """Relational arguments for Confessions"""
    user: Union[bool, 'UserArgsFromConfessionsRecursive1']
    Likes: Union[bool, 'FindManyLikeArgsFromConfessionsRecursive1']


class ConfessionsIncludeFromConfessionsRecursive1(TypedDict, total=False):
    """Relational arguments for Confessions"""
    user: Union[bool, 'UserArgsFromConfessionsRecursive2']
    Likes: Union[bool, 'FindManyLikeArgsFromConfessionsRecursive2']


class ConfessionsIncludeFromConfessionsRecursive2(TypedDict, total=False):
    """Relational arguments for Confessions"""
    user: Union[bool, 'UserArgsFromConfessionsRecursive3']
    Likes: Union[bool, 'FindManyLikeArgsFromConfessionsRecursive3']


class ConfessionsIncludeFromConfessionsRecursive3(TypedDict, total=False):
    """Relational arguments for Confessions"""
    user: Union[bool, 'UserArgsFromConfessionsRecursive4']
    Likes: Union[bool, 'FindManyLikeArgsFromConfessionsRecursive4']


class ConfessionsIncludeFromConfessionsRecursive4(TypedDict, total=False):
    """Relational arguments for Confessions"""

    

class ConfessionsArgsFromConfessions(TypedDict, total=False):
    """Arguments for Confessions"""
    include: 'ConfessionsIncludeFromConfessionsRecursive1'


class ConfessionsArgsFromConfessionsRecursive1(TypedDict, total=False):
    """Arguments for Confessions"""
    include: 'ConfessionsIncludeFromConfessionsRecursive2'


class ConfessionsArgsFromConfessionsRecursive2(TypedDict, total=False):
    """Arguments for Confessions"""
    include: 'ConfessionsIncludeFromConfessionsRecursive3'


class ConfessionsArgsFromConfessionsRecursive3(TypedDict, total=False):
    """Arguments for Confessions"""
    include: 'ConfessionsIncludeFromConfessionsRecursive4'


class ConfessionsArgsFromConfessionsRecursive4(TypedDict, total=False):
    """Arguments for Confessions"""
    
    

class FindManyConfessionsArgsFromConfessions(TypedDict, total=False):
    """Arguments for Confessions"""
    take: int
    skip: int
    order_by: Union['ConfessionsOrderByInput', List['ConfessionsOrderByInput']]
    where: 'ConfessionsWhereInput'
    cursor: 'ConfessionsWhereUniqueInput'
    distinct: List['ConfessionsScalarFieldKeys']
    include: 'ConfessionsIncludeFromConfessionsRecursive1'


class FindManyConfessionsArgsFromConfessionsRecursive1(TypedDict, total=False):
    """Arguments for Confessions"""
    take: int
    skip: int
    order_by: Union['ConfessionsOrderByInput', List['ConfessionsOrderByInput']]
    where: 'ConfessionsWhereInput'
    cursor: 'ConfessionsWhereUniqueInput'
    distinct: List['ConfessionsScalarFieldKeys']
    include: 'ConfessionsIncludeFromConfessionsRecursive2'


class FindManyConfessionsArgsFromConfessionsRecursive2(TypedDict, total=False):
    """Arguments for Confessions"""
    take: int
    skip: int
    order_by: Union['ConfessionsOrderByInput', List['ConfessionsOrderByInput']]
    where: 'ConfessionsWhereInput'
    cursor: 'ConfessionsWhereUniqueInput'
    distinct: List['ConfessionsScalarFieldKeys']
    include: 'ConfessionsIncludeFromConfessionsRecursive3'


class FindManyConfessionsArgsFromConfessionsRecursive3(TypedDict, total=False):
    """Arguments for Confessions"""
    take: int
    skip: int
    order_by: Union['ConfessionsOrderByInput', List['ConfessionsOrderByInput']]
    where: 'ConfessionsWhereInput'
    cursor: 'ConfessionsWhereUniqueInput'
    distinct: List['ConfessionsScalarFieldKeys']
    include: 'ConfessionsIncludeFromConfessionsRecursive4'


class FindManyConfessionsArgsFromConfessionsRecursive4(TypedDict, total=False):
    """Arguments for Confessions"""
    take: int
    skip: int
    order_by: Union['ConfessionsOrderByInput', List['ConfessionsOrderByInput']]
    where: 'ConfessionsWhereInput'
    cursor: 'ConfessionsWhereUniqueInput'
    distinct: List['ConfessionsScalarFieldKeys']
    
    

class LikeIncludeFromConfessions(TypedDict, total=False):
    """Relational arguments for Confessions"""
    userLike: Union[bool, 'UserArgsFromConfessionsRecursive1']
    confession: Union[bool, 'ConfessionsArgsFromConfessionsRecursive1']


class LikeIncludeFromConfessionsRecursive1(TypedDict, total=False):
    """Relational arguments for Confessions"""
    userLike: Union[bool, 'UserArgsFromConfessionsRecursive2']
    confession: Union[bool, 'ConfessionsArgsFromConfessionsRecursive2']


class LikeIncludeFromConfessionsRecursive2(TypedDict, total=False):
    """Relational arguments for Confessions"""
    userLike: Union[bool, 'UserArgsFromConfessionsRecursive3']
    confession: Union[bool, 'ConfessionsArgsFromConfessionsRecursive3']


class LikeIncludeFromConfessionsRecursive3(TypedDict, total=False):
    """Relational arguments for Confessions"""
    userLike: Union[bool, 'UserArgsFromConfessionsRecursive4']
    confession: Union[bool, 'ConfessionsArgsFromConfessionsRecursive4']


class LikeIncludeFromConfessionsRecursive4(TypedDict, total=False):
    """Relational arguments for Confessions"""

    

class LikeArgsFromConfessions(TypedDict, total=False):
    """Arguments for Confessions"""
    include: 'LikeIncludeFromLikeRecursive1'


class LikeArgsFromConfessionsRecursive1(TypedDict, total=False):
    """Arguments for Confessions"""
    include: 'LikeIncludeFromLikeRecursive2'


class LikeArgsFromConfessionsRecursive2(TypedDict, total=False):
    """Arguments for Confessions"""
    include: 'LikeIncludeFromLikeRecursive3'


class LikeArgsFromConfessionsRecursive3(TypedDict, total=False):
    """Arguments for Confessions"""
    include: 'LikeIncludeFromLikeRecursive4'


class LikeArgsFromConfessionsRecursive4(TypedDict, total=False):
    """Arguments for Confessions"""
    
    

class FindManyLikeArgsFromConfessions(TypedDict, total=False):
    """Arguments for Confessions"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive1'


class FindManyLikeArgsFromConfessionsRecursive1(TypedDict, total=False):
    """Arguments for Confessions"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive2'


class FindManyLikeArgsFromConfessionsRecursive2(TypedDict, total=False):
    """Arguments for Confessions"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive3'


class FindManyLikeArgsFromConfessionsRecursive3(TypedDict, total=False):
    """Arguments for Confessions"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive4'


class FindManyLikeArgsFromConfessionsRecursive4(TypedDict, total=False):
    """Arguments for Confessions"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    


FindManyConfessionsArgs = FindManyConfessionsArgsFromConfessions
FindFirstConfessionsArgs = FindManyConfessionsArgsFromConfessions


    

class ConfessionsWhereInput(TypedDict, total=False):
    """Confessions arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    text: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    Likes: 'LikeListRelationFilter'

    # should be noted that AND and NOT should be Union['ConfessionsWhereInputRecursive1', List['ConfessionsWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ConfessionsWhereInputRecursive1']
    OR: List['ConfessionsWhereInputRecursive1']
    NOT: List['ConfessionsWhereInputRecursive1']


class ConfessionsWhereInputRecursive1(TypedDict, total=False):
    """Confessions arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    text: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    Likes: 'LikeListRelationFilter'

    # should be noted that AND and NOT should be Union['ConfessionsWhereInputRecursive2', List['ConfessionsWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ConfessionsWhereInputRecursive2']
    OR: List['ConfessionsWhereInputRecursive2']
    NOT: List['ConfessionsWhereInputRecursive2']


class ConfessionsWhereInputRecursive2(TypedDict, total=False):
    """Confessions arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    text: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    Likes: 'LikeListRelationFilter'

    # should be noted that AND and NOT should be Union['ConfessionsWhereInputRecursive3', List['ConfessionsWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ConfessionsWhereInputRecursive3']
    OR: List['ConfessionsWhereInputRecursive3']
    NOT: List['ConfessionsWhereInputRecursive3']


class ConfessionsWhereInputRecursive3(TypedDict, total=False):
    """Confessions arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    text: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    Likes: 'LikeListRelationFilter'

    # should be noted that AND and NOT should be Union['ConfessionsWhereInputRecursive4', List['ConfessionsWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ConfessionsWhereInputRecursive4']
    OR: List['ConfessionsWhereInputRecursive4']
    NOT: List['ConfessionsWhereInputRecursive4']


class ConfessionsWhereInputRecursive4(TypedDict, total=False):
    """Confessions arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    text: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    Likes: 'LikeListRelationFilter'



# aggregate Confessions types


    

class ConfessionsScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Confessions arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    text: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ConfessionsScalarWhereWithAggregatesInputRecursive1']
    OR: List['ConfessionsScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ConfessionsScalarWhereWithAggregatesInputRecursive1']


class ConfessionsScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Confessions arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    text: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ConfessionsScalarWhereWithAggregatesInputRecursive2']
    OR: List['ConfessionsScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ConfessionsScalarWhereWithAggregatesInputRecursive2']


class ConfessionsScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Confessions arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    text: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ConfessionsScalarWhereWithAggregatesInputRecursive3']
    OR: List['ConfessionsScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ConfessionsScalarWhereWithAggregatesInputRecursive3']


class ConfessionsScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Confessions arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    text: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ConfessionsScalarWhereWithAggregatesInputRecursive4']
    OR: List['ConfessionsScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ConfessionsScalarWhereWithAggregatesInputRecursive4']


class ConfessionsScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Confessions arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    text: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']



class ConfessionsGroupByOutput(TypedDict, total=False):
    id: _str
    text: _str
    userId: _str
    _sum: 'ConfessionsSumAggregateOutput'
    _avg: 'ConfessionsAvgAggregateOutput'
    _min: 'ConfessionsMinAggregateOutput'
    _max: 'ConfessionsMaxAggregateOutput'
    _count: 'ConfessionsCountAggregateOutput'


class ConfessionsAvgAggregateOutput(TypedDict, total=False):
    """Confessions output for aggregating averages"""


class ConfessionsSumAggregateOutput(TypedDict, total=False):
    """Confessions output for aggregating sums"""


class ConfessionsScalarAggregateOutput(TypedDict, total=False):
    """Confessions output including scalar fields"""
    id: _str
    text: _str
    userId: _str


ConfessionsMinAggregateOutput = ConfessionsScalarAggregateOutput
ConfessionsMaxAggregateOutput = ConfessionsScalarAggregateOutput


class ConfessionsMaxAggregateInput(TypedDict, total=False):
    """Confessions input for aggregating by max"""
    id: bool
    text: bool
    userId: bool


class ConfessionsMinAggregateInput(TypedDict, total=False):
    """Confessions input for aggregating by min"""
    id: bool
    text: bool
    userId: bool


class ConfessionsNumberAggregateInput(TypedDict, total=False):
    """Confessions input for aggregating numbers"""


ConfessionsAvgAggregateInput = ConfessionsNumberAggregateInput
ConfessionsSumAggregateInput = ConfessionsNumberAggregateInput


ConfessionsCountAggregateInput = TypedDict(
    'ConfessionsCountAggregateInput',
    {
        'id': bool,
        'text': bool,
        'userId': bool,
        '_all': bool,
    },
    total=False,
)

ConfessionsCountAggregateOutput = TypedDict(
    'ConfessionsCountAggregateOutput',
    {
        'id': int,
        'text': int,
        'userId': int,
        '_all': int,
    },
    total=False,
)


ConfessionsKeys = Literal[
    'id',
    'text',
    'userId',
    'user',
    'Likes',
]
ConfessionsScalarFieldKeys = Literal[
    'id',
    'text',
    'userId',
]
ConfessionsScalarFieldKeysT = TypeVar('ConfessionsScalarFieldKeysT', bound=ConfessionsScalarFieldKeys)

ConfessionsRelationalFieldKeys = Literal[
        'user',
        'Likes',
    ]

# Like types

class LikeOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Like create method"""
    id: _str
    userId: _str
    userLike: 'UserCreateNestedWithoutRelationsInput'
    ConfessionId: _str
    confession: 'ConfessionsCreateNestedWithoutRelationsInput'


class LikeCreateInput(LikeOptionalCreateInput):
    """Required arguments to the Like create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class LikeOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Like create method, without relations"""
    id: _str
    userId: _str
    ConfessionId: _str


class LikeCreateWithoutRelationsInput(LikeOptionalCreateWithoutRelationsInput):
    """Required arguments to the Like create method, without relations"""

class LikeConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'LikeCreateWithoutRelationsInput'
    where: 'LikeWhereUniqueInput'

class LikeCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'LikeCreateWithoutRelationsInput'
    connect: 'LikeWhereUniqueInput'
    connect_or_create: 'LikeConnectOrCreateWithoutRelationsInput'


class LikeCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['LikeCreateWithoutRelationsInput', List['LikeCreateWithoutRelationsInput']]
    connect: Union['LikeWhereUniqueInput', List['LikeWhereUniqueInput']]
    connect_or_create: Union['LikeConnectOrCreateWithoutRelationsInput', List['LikeConnectOrCreateWithoutRelationsInput']]

_LikeWhereUnique_id_Input = TypedDict(
    '_LikeWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_LikeCompounduserId_ConfessionIdKeyInner = TypedDict(
    '_LikeCompounduserId_ConfessionIdKeyInner',
    {
        'userId': '_str',
        'ConfessionId': '_str',
    },
    total=True
)

_LikeCompounduserId_ConfessionIdKey = TypedDict(
    '_LikeCompounduserId_ConfessionIdKey',
    {
        'userId_ConfessionId': '_LikeCompounduserId_ConfessionIdKeyInner',
    },
    total=True
)

LikeWhereUniqueInput = Union[
    '_LikeWhereUnique_id_Input',
    '_LikeCompounduserId_ConfessionIdKey',
]


class LikeUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    userLike: 'UserUpdateOneWithoutRelationsInput'
    confession: 'ConfessionsUpdateOneWithoutRelationsInput'


class LikeUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str


class LikeUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['LikeCreateWithoutRelationsInput']
    connect: List['LikeWhereUniqueInput']
    connect_or_create: List['LikeConnectOrCreateWithoutRelationsInput']
    set: List['LikeWhereUniqueInput']
    disconnect: List['LikeWhereUniqueInput']
    delete: List['LikeWhereUniqueInput']

    # TODO
    # update: List['LikeUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['LikeUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['LikeScalarWhereInput']
    # upsert: List['LikeUpserteWithWhereUniqueWithoutRelationsInput']


class LikeUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'LikeCreateWithoutRelationsInput'
    connect: 'LikeWhereUniqueInput'
    connect_or_create: 'LikeConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'LikeUpdateInput'
    # upsert: 'LikeUpsertWithoutRelationsInput'


class LikeUpsertInput(TypedDict):
    create: 'LikeCreateInput'
    update: 'LikeUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Like_id_OrderByInput = TypedDict(
    '_Like_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Like_userId_OrderByInput = TypedDict(
    '_Like_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Like_ConfessionId_OrderByInput = TypedDict(
    '_Like_ConfessionId_OrderByInput',
    {
        'ConfessionId': 'SortOrder',
    },
    total=True
)

_Like_RelevanceInner = TypedDict(
    '_Like_RelevanceInner',
    {
        'fields': 'List[LikeScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Like_RelevanceOrderByInput = TypedDict(
    '_Like_RelevanceOrderByInput',
    {
        '_relevance': '_Like_RelevanceInner',
    },
    total=True
)

LikeOrderByInput = Union[
    '_Like_id_OrderByInput',
    '_Like_userId_OrderByInput',
    '_Like_ConfessionId_OrderByInput',
    '_Like_RelevanceOrderByInput',
]



# recursive Like types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

LikeRelationFilter = TypedDict(
    'LikeRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class LikeListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class LikeInclude(TypedDict, total=False):
    """Like relational arguments"""
    userLike: Union[bool, 'UserArgsFromLike']
    confession: Union[bool, 'ConfessionsArgsFromLike']


    

class UserIncludeFromLike(TypedDict, total=False):
    """Relational arguments for Like"""
    confessions: Union[bool, 'FindManyConfessionsArgsFromLikeRecursive1']
    Likes: Union[bool, 'FindManyLikeArgsFromLikeRecursive1']


class UserIncludeFromLikeRecursive1(TypedDict, total=False):
    """Relational arguments for Like"""
    confessions: Union[bool, 'FindManyConfessionsArgsFromLikeRecursive2']
    Likes: Union[bool, 'FindManyLikeArgsFromLikeRecursive2']


class UserIncludeFromLikeRecursive2(TypedDict, total=False):
    """Relational arguments for Like"""
    confessions: Union[bool, 'FindManyConfessionsArgsFromLikeRecursive3']
    Likes: Union[bool, 'FindManyLikeArgsFromLikeRecursive3']


class UserIncludeFromLikeRecursive3(TypedDict, total=False):
    """Relational arguments for Like"""
    confessions: Union[bool, 'FindManyConfessionsArgsFromLikeRecursive4']
    Likes: Union[bool, 'FindManyLikeArgsFromLikeRecursive4']


class UserIncludeFromLikeRecursive4(TypedDict, total=False):
    """Relational arguments for Like"""

    

class UserArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    
    

class FindManyUserArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class ConfessionsIncludeFromLike(TypedDict, total=False):
    """Relational arguments for Like"""
    user: Union[bool, 'UserArgsFromLikeRecursive1']
    Likes: Union[bool, 'FindManyLikeArgsFromLikeRecursive1']


class ConfessionsIncludeFromLikeRecursive1(TypedDict, total=False):
    """Relational arguments for Like"""
    user: Union[bool, 'UserArgsFromLikeRecursive2']
    Likes: Union[bool, 'FindManyLikeArgsFromLikeRecursive2']


class ConfessionsIncludeFromLikeRecursive2(TypedDict, total=False):
    """Relational arguments for Like"""
    user: Union[bool, 'UserArgsFromLikeRecursive3']
    Likes: Union[bool, 'FindManyLikeArgsFromLikeRecursive3']


class ConfessionsIncludeFromLikeRecursive3(TypedDict, total=False):
    """Relational arguments for Like"""
    user: Union[bool, 'UserArgsFromLikeRecursive4']
    Likes: Union[bool, 'FindManyLikeArgsFromLikeRecursive4']


class ConfessionsIncludeFromLikeRecursive4(TypedDict, total=False):
    """Relational arguments for Like"""

    

class ConfessionsArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    include: 'ConfessionsIncludeFromConfessionsRecursive1'


class ConfessionsArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    include: 'ConfessionsIncludeFromConfessionsRecursive2'


class ConfessionsArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    include: 'ConfessionsIncludeFromConfessionsRecursive3'


class ConfessionsArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    include: 'ConfessionsIncludeFromConfessionsRecursive4'


class ConfessionsArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    
    

class FindManyConfessionsArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['ConfessionsOrderByInput', List['ConfessionsOrderByInput']]
    where: 'ConfessionsWhereInput'
    cursor: 'ConfessionsWhereUniqueInput'
    distinct: List['ConfessionsScalarFieldKeys']
    include: 'ConfessionsIncludeFromConfessionsRecursive1'


class FindManyConfessionsArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['ConfessionsOrderByInput', List['ConfessionsOrderByInput']]
    where: 'ConfessionsWhereInput'
    cursor: 'ConfessionsWhereUniqueInput'
    distinct: List['ConfessionsScalarFieldKeys']
    include: 'ConfessionsIncludeFromConfessionsRecursive2'


class FindManyConfessionsArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['ConfessionsOrderByInput', List['ConfessionsOrderByInput']]
    where: 'ConfessionsWhereInput'
    cursor: 'ConfessionsWhereUniqueInput'
    distinct: List['ConfessionsScalarFieldKeys']
    include: 'ConfessionsIncludeFromConfessionsRecursive3'


class FindManyConfessionsArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['ConfessionsOrderByInput', List['ConfessionsOrderByInput']]
    where: 'ConfessionsWhereInput'
    cursor: 'ConfessionsWhereUniqueInput'
    distinct: List['ConfessionsScalarFieldKeys']
    include: 'ConfessionsIncludeFromConfessionsRecursive4'


class FindManyConfessionsArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['ConfessionsOrderByInput', List['ConfessionsOrderByInput']]
    where: 'ConfessionsWhereInput'
    cursor: 'ConfessionsWhereUniqueInput'
    distinct: List['ConfessionsScalarFieldKeys']
    
    

class LikeIncludeFromLike(TypedDict, total=False):
    """Relational arguments for Like"""
    userLike: Union[bool, 'UserArgsFromLikeRecursive1']
    confession: Union[bool, 'ConfessionsArgsFromLikeRecursive1']


class LikeIncludeFromLikeRecursive1(TypedDict, total=False):
    """Relational arguments for Like"""
    userLike: Union[bool, 'UserArgsFromLikeRecursive2']
    confession: Union[bool, 'ConfessionsArgsFromLikeRecursive2']


class LikeIncludeFromLikeRecursive2(TypedDict, total=False):
    """Relational arguments for Like"""
    userLike: Union[bool, 'UserArgsFromLikeRecursive3']
    confession: Union[bool, 'ConfessionsArgsFromLikeRecursive3']


class LikeIncludeFromLikeRecursive3(TypedDict, total=False):
    """Relational arguments for Like"""
    userLike: Union[bool, 'UserArgsFromLikeRecursive4']
    confession: Union[bool, 'ConfessionsArgsFromLikeRecursive4']


class LikeIncludeFromLikeRecursive4(TypedDict, total=False):
    """Relational arguments for Like"""

    

class LikeArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    include: 'LikeIncludeFromLikeRecursive1'


class LikeArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    include: 'LikeIncludeFromLikeRecursive2'


class LikeArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    include: 'LikeIncludeFromLikeRecursive3'


class LikeArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    include: 'LikeIncludeFromLikeRecursive4'


class LikeArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    
    

class FindManyLikeArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive1'


class FindManyLikeArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive2'


class FindManyLikeArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive3'


class FindManyLikeArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive4'


class FindManyLikeArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    


FindManyLikeArgs = FindManyLikeArgsFromLike
FindFirstLikeArgs = FindManyLikeArgsFromLike


    

class LikeWhereInput(TypedDict, total=False):
    """Like arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    userLike: 'UserRelationFilter'
    ConfessionId: Union[_str, 'types.StringFilter']
    confession: 'ConfessionsRelationFilter'

    # should be noted that AND and NOT should be Union['LikeWhereInputRecursive1', List['LikeWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['LikeWhereInputRecursive1']
    OR: List['LikeWhereInputRecursive1']
    NOT: List['LikeWhereInputRecursive1']


class LikeWhereInputRecursive1(TypedDict, total=False):
    """Like arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    userLike: 'UserRelationFilter'
    ConfessionId: Union[_str, 'types.StringFilter']
    confession: 'ConfessionsRelationFilter'

    # should be noted that AND and NOT should be Union['LikeWhereInputRecursive2', List['LikeWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['LikeWhereInputRecursive2']
    OR: List['LikeWhereInputRecursive2']
    NOT: List['LikeWhereInputRecursive2']


class LikeWhereInputRecursive2(TypedDict, total=False):
    """Like arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    userLike: 'UserRelationFilter'
    ConfessionId: Union[_str, 'types.StringFilter']
    confession: 'ConfessionsRelationFilter'

    # should be noted that AND and NOT should be Union['LikeWhereInputRecursive3', List['LikeWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['LikeWhereInputRecursive3']
    OR: List['LikeWhereInputRecursive3']
    NOT: List['LikeWhereInputRecursive3']


class LikeWhereInputRecursive3(TypedDict, total=False):
    """Like arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    userLike: 'UserRelationFilter'
    ConfessionId: Union[_str, 'types.StringFilter']
    confession: 'ConfessionsRelationFilter'

    # should be noted that AND and NOT should be Union['LikeWhereInputRecursive4', List['LikeWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['LikeWhereInputRecursive4']
    OR: List['LikeWhereInputRecursive4']
    NOT: List['LikeWhereInputRecursive4']


class LikeWhereInputRecursive4(TypedDict, total=False):
    """Like arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    userLike: 'UserRelationFilter'
    ConfessionId: Union[_str, 'types.StringFilter']
    confession: 'ConfessionsRelationFilter'



# aggregate Like types


    

class LikeScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Like arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    ConfessionId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['LikeScalarWhereWithAggregatesInputRecursive1']
    OR: List['LikeScalarWhereWithAggregatesInputRecursive1']
    NOT: List['LikeScalarWhereWithAggregatesInputRecursive1']


class LikeScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Like arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    ConfessionId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['LikeScalarWhereWithAggregatesInputRecursive2']
    OR: List['LikeScalarWhereWithAggregatesInputRecursive2']
    NOT: List['LikeScalarWhereWithAggregatesInputRecursive2']


class LikeScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Like arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    ConfessionId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['LikeScalarWhereWithAggregatesInputRecursive3']
    OR: List['LikeScalarWhereWithAggregatesInputRecursive3']
    NOT: List['LikeScalarWhereWithAggregatesInputRecursive3']


class LikeScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Like arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    ConfessionId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['LikeScalarWhereWithAggregatesInputRecursive4']
    OR: List['LikeScalarWhereWithAggregatesInputRecursive4']
    NOT: List['LikeScalarWhereWithAggregatesInputRecursive4']


class LikeScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Like arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    ConfessionId: Union[_str, 'types.StringWithAggregatesFilter']



class LikeGroupByOutput(TypedDict, total=False):
    id: _str
    userId: _str
    ConfessionId: _str
    _sum: 'LikeSumAggregateOutput'
    _avg: 'LikeAvgAggregateOutput'
    _min: 'LikeMinAggregateOutput'
    _max: 'LikeMaxAggregateOutput'
    _count: 'LikeCountAggregateOutput'


class LikeAvgAggregateOutput(TypedDict, total=False):
    """Like output for aggregating averages"""


class LikeSumAggregateOutput(TypedDict, total=False):
    """Like output for aggregating sums"""


class LikeScalarAggregateOutput(TypedDict, total=False):
    """Like output including scalar fields"""
    id: _str
    userId: _str
    ConfessionId: _str


LikeMinAggregateOutput = LikeScalarAggregateOutput
LikeMaxAggregateOutput = LikeScalarAggregateOutput


class LikeMaxAggregateInput(TypedDict, total=False):
    """Like input for aggregating by max"""
    id: bool
    userId: bool
    ConfessionId: bool


class LikeMinAggregateInput(TypedDict, total=False):
    """Like input for aggregating by min"""
    id: bool
    userId: bool
    ConfessionId: bool


class LikeNumberAggregateInput(TypedDict, total=False):
    """Like input for aggregating numbers"""


LikeAvgAggregateInput = LikeNumberAggregateInput
LikeSumAggregateInput = LikeNumberAggregateInput


LikeCountAggregateInput = TypedDict(
    'LikeCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'ConfessionId': bool,
        '_all': bool,
    },
    total=False,
)

LikeCountAggregateOutput = TypedDict(
    'LikeCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'ConfessionId': int,
        '_all': int,
    },
    total=False,
)


LikeKeys = Literal[
    'id',
    'userId',
    'userLike',
    'ConfessionId',
    'confession',
]
LikeScalarFieldKeys = Literal[
    'id',
    'userId',
    'ConfessionId',
]
LikeScalarFieldKeysT = TypeVar('LikeScalarFieldKeysT', bound=LikeScalarFieldKeys)

LikeRelationalFieldKeys = Literal[
        'userLike',
        'confession',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields